#!/usr/bin/env ruby

require_relative '../lib/linkerapi'
require_relative '../lib/redirectapp'

require 'minitest/spec'
require 'minitest/autorun'
require 'tempfile'
require 'logger'
require 'rack'

NULLOG = Logger.new('/dev/null')

describe LinkerAPI do
  API_PORT = 4560
  REDIR_PORT = 4561
  CHARS = [('a'..'z'),('A'..'Y'),('0'..'9')].map{|r|r.to_a}.reduce(:+)
  TIMES = 50
  def boot(port, app)
    @servers ||= []
    thread = Thread.new{ Rack::Server.new(server:'webrick', AccessLog: NULLOG, Logger: NULLOG, Port:port, app:app).start{|s|@servers<<s} }
    while !(Net::HTTP.get_response('localhost','/',port) rescue nil); thread.join(0); end
  end
  before do
    @store_tmp = Tempfile.new('actions.store')
    @words_tmp = Tempfile.new('words')
    boot API_PORT, LinkerAPI.new(@store_tmp.path, @words_tmp.path, log: NULLOG)
    boot REDIR_PORT, RedirectApp.new("http://localhost:#{API_PORT}", log: NULLOG)
  end
  after do
    @servers.each{|s|s.shutdown}
    [@store_tmp, @words_tmp].each{|t| t.close; t.unlink}
  end
  def create
    mkstr = lambda{(rand(8)+8).times.map{CHARS[rand(CHARS.size)]}.join}
    uri = "http://#{mkstr.call}.org/#{mkstr.call}?#{mkstr.call}=#{mkstr.call}"
    response = Net::HTTP.post_form(URI("http://localhost:#{API_PORT}/create"), {uri: uri})
    response.code.must_equal "200"
    [uri, response.body]
  end
  private :create
  it "can create redirect and get via api" do
    uri, id = create
    Net::HTTP.get(URI("http://localhost:#{API_PORT}/get/#{id}")).must_equal uri
  end
  def check_api_and_redirect_app times
    uris = {}
    times.times do
      uri, id = create
      uris[id] = uri
      threads = []
      uris.each{|id, uri| threads << Thread.new{[uri, Net::HTTP.new('localhost',REDIR_PORT).get("/#{id}")]}}
      threads.map do |t|
        uri, response = t.value
        response.code.must_equal "302"
        response['location'].must_equal uri
      end
    end
  end
  it "can create redirect and follow via app" do
    check_api_and_redirect_app 1
  end
  it "can be hammered" do
    check_api_and_redirect_app TIMES
  end
end
