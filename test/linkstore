#!/usr/bin/env ruby

require_relative '../lib/linkstore'

require 'minitest/spec'
require 'minitest/autorun'
require 'date'
require 'tempfile'

describe LinkStore do
  WORDS = ['one', 'two', 'four']
  CHARS = [('a'..'z'),('A'..'Y'),('0'..'9')].map{|r|r.to_a}.reduce(:+)
  TIMES = 100
  before do
    @tempfile = Tempfile.new(Minitest::Spec.current.__name__)
  end
  after do
    @tempfile.close; @tempfile.unlink
  end
  def store
    LinkStore.new(@tempfile.path, words: WORDS)
  end
  private :store
  def mklink
    mkstr = lambda{(rand(8)+8).times.map{CHARS[rand(CHARS.size)]}.join}
    "http://#{mkstr.call}.org/#{mkstr.call}?#{mkstr.call}=#{mkstr.call}"
  end
  private :mklink
  it "can create and get back link" do
    link = mklink
    id = store.create(link)
    store.get(id).must_equal link
  end
  it "can create and get back many links" do
    links = {}
    TIMES.times do
      link = mklink
      id = store.create link
      links.include?(id).must_equal false
      links[id] = link
      links.each{|id,uri| store.get(id).must_equal(uri)}
    end
  end
end
